define("bundles/assess/framework/QuestionController",["require","exports","module","backbone","underscore","bundles/assess/lib/constants","bundles/assess/questionTypes/allStudentTypes","js/lib/coursera.mathjax"],function(require,exports,module){"use strict";var Backbone=require("backbone"),_=require("underscore"),e=require("bundles/assess/lib/constants"),s=require("bundles/assess/questionTypes/allStudentTypes"),i=require("js/lib/coursera.mathjax"),t=Backbone.View.extend({_initQuestionView:function _initQuestionView(){if(this.questionView&&(this.$el.empty(),this.questionView=null),this.model.hasNoDetails())this.$el.hide();else{var e=this._getType(),s=this.model.toLocalJson();this.questionView=new e.QuestionView({instance:s,index:this.options.index,showFeedbackIcon:this.options.showFeedbackIcon||!1,el:this.el}),this.questionView.className&&this.$el.addClass(this.questionView.className),this.questionView.render(),this.$("a").attr("target","_blank"),i.render(this.$el[0]),this.$('[data-js="user-html"]').addClass(this.options.userHtmlClass),this.questionView.on("change",this._handleViewResponseChange,this),this.questionView.on("submit",this.submit,this),this.setModelResponseToViewResponse({reason:"loadfrominitialrender"}),this._handleIsSubmitAllowed(),this.$el.show()}},initialize:function initialize(i){this.options=this.options||i||{},this.options.userHtmlClass=this.options.userHtmlClass||e.defaultUserHtmlClass,this._disableReasons=[],this.options.allStudentTypes=this.options.allStudentTypes||s,this._initQuestionView(),this.model.on("change",this._handleQuestionModelChange,this)},remove:function remove(){this.model.off("change",this._handleQuestionModelChange,this),Backbone.View.prototype.remove.call(this)},submit:function submit(){this.setModelResponseToViewResponse({reason:"presubmit"}),this.model.trigger("submit")},setModelResponseToViewResponse:function setModelResponseToViewResponse(e){this.questionView?(this.model.set("localResponse",this.questionView.serializeResponse(),e),this.model.set("isAnswered",this.questionView.isAnswered())):(this.model.set("localResponse",null,e),this.model.set("isAnswered",!1))},_getType:function _getType(){var e=this.options.typeId||this.model.get("question").type,s=this.options.allStudentTypes[e];if(!s)throw new Error("Unknown question type: "+e);return s},_handleViewResponseChange:function _handleViewResponseChange(){_.defer(this.setModelResponseToViewResponse.bind(this),{reason:"userinput"})},_handleQuestionModelChange:function _handleQuestionModelChange(s,e){if(e&&("userinput"===e.reason||"loadfrominitialrender"===e.reason))return;s.isInstanceChanged()&&this._initQuestionView(),this._handleIsSubmitAllowed()},_handleIsSubmitAllowed:function _handleIsSubmitAllowed(){this.model.get("isSubmitAllowed")?this.enableInput("submitNotAllowed"):this.disableInput("submitNotAllowed")},disableInput:function disableInput(e){_(e).isUndefined()&&(e="unspecified"),this._disableReasons.push(e),this.questionView&&this.questionView.disableInput()},enableInput:function enableInput(e){_(e).isUndefined()&&(e="unspecified"),this._disableReasons=_(this._disableReasons).without(e),0===this._disableReasons.length&&this.questionView&&this.questionView.enableInput()},getSupportedStyles:function getSupportedStyles(){return this._getType().QuestionView.prototype.supportedStyles}});module.exports=t});