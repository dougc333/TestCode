/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.example.avro;  
@SuppressWarnings("all")
/** This is a user record in a fictitious to-do-list management app. It supports arbitrary grouping and nesting of items, and allows you to add items by email or by tweeting.

Note this app doesn't actually exist. The schema is just a demo for [Avrodoc](https://github.com/ept/avrodoc)! */
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"com.example.avro\",\"doc\":\"This is a user record in a fictitious to-do-list management app. It supports arbitrary grouping and nesting of items, and allows you to add items by email or by tweeting.\\n\\nNote this app doesn't actually exist. The schema is just a demo for [Avrodoc](https://github.com/ept/avrodoc)!\",\"fields\":[{\"name\":\"id\",\"type\":\"int\",\"doc\":\"System-assigned numeric user ID. Cannot be changed by the user.\"},{\"name\":\"username\",\"type\":\"string\",\"doc\":\"The username chosen by the user. Can be changed by the user.\"},{\"name\":\"passwordHash\",\"type\":\"string\",\"doc\":\"The user's password, hashed using [scrypt](http://www.tarsnap.com/scrypt.html).\"},{\"name\":\"signupDate\",\"type\":\"long\",\"doc\":\"Timestamp (milliseconds since epoch) when the user signed up\"},{\"name\":\"emailAddresses\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EmailAddress\",\"doc\":\"Stores details about an email address that a user has associated with their account.\",\"fields\":[{\"name\":\"address\",\"type\":\"string\",\"doc\":\"The email address, e.g. `foo@example.com`\"},{\"name\":\"verified\",\"type\":\"boolean\",\"doc\":\"true if the user has clicked the link in a confirmation email to this address.\",\"default\":false},{\"name\":\"dateAdded\",\"type\":\"long\",\"doc\":\"Timestamp (milliseconds since epoch) when the email address was added to the account.\"},{\"name\":\"dateBounced\",\"type\":[\"null\",\"long\"],\"doc\":\"Timestamp (milliseconds since epoch) when an email sent to this address last bounced. Reset to null when the address no longer bounces.\"}]}},\"doc\":\"All email addresses on the user's account\"},{\"name\":\"twitterAccounts\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TwitterAccount\",\"doc\":\"Stores access credentials for one Twitter account, as granted to us by the user by OAuth.\",\"fields\":[{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"OAuthStatus\",\"doc\":\"* `PENDING`: the user has started authorizing, but not yet finished\\n* `ACTIVE`: the token should work\\n* `DENIED`: the user declined the authorization\\n* `EXPIRED`: the token used to work, but now it doesn't\\n* `REVOKED`: the user has explicitly revoked the token\",\"symbols\":[\"PENDING\",\"ACTIVE\",\"DENIED\",\"EXPIRED\",\"REVOKED\"]},\"doc\":\"Indicator of whether this authorization is currently active, or has been revoked\"},{\"name\":\"userId\",\"type\":\"long\",\"doc\":\"Twitter's numeric ID for this user\"},{\"name\":\"screenName\",\"type\":\"string\",\"doc\":\"The twitter username for this account (can be changed by the user)\"},{\"name\":\"oauthToken\",\"type\":\"string\",\"doc\":\"The OAuth token for this Twitter account\"},{\"name\":\"oauthTokenSecret\",\"type\":[\"null\",\"string\"],\"doc\":\"The OAuth secret, used for signing requests on behalf of this Twitter account. `null` whilst the OAuth flow is not yet complete.\"},{\"name\":\"dateAuthorized\",\"type\":\"long\",\"doc\":\"Timestamp (milliseconds since epoch) when the user last authorized this Twitter account\"}]}},\"doc\":\"All Twitter accounts that the user has OAuthed\"},{\"name\":\"toDoItems\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ToDoItem\",\"doc\":\"A record is one node in a To-Do item tree (every record can contain nested sub-records).\",\"fields\":[{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"ToDoStatus\",\"doc\":\"* `HIDDEN`: not currently visible, e.g. because it becomes actionable in future\\n* `ACTIONABLE`: appears in the current to-do list\\n* `DONE`: marked as done, but still appears in the list\\n* `ARCHIVED`: marked as done and no longer visible\\n* `DELETED`: not done and removed from list (preserved for undo purposes)\",\"symbols\":[\"HIDDEN\",\"ACTIONABLE\",\"DONE\",\"ARCHIVED\",\"DELETED\"]},\"doc\":\"User-selected state for this item (e.g. whether or not it is marked as done)\"},{\"name\":\"title\",\"type\":\"string\",\"doc\":\"One-line summary of the item\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"Detailed description (may contain HTML markup)\"},{\"name\":\"snoozeDate\",\"type\":[\"null\",\"long\"],\"doc\":\"Timestamp (milliseconds since epoch) at which the item should go from `HIDDEN` to `ACTIONABLE` status\"},{\"name\":\"subItems\",\"type\":{\"type\":\"array\",\"items\":\"ToDoItem\"},\"doc\":\"List of children of this to-do tree node\"}]}},\"doc\":\"The top-level items in the user's to-do list\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** System-assigned numeric user ID. Cannot be changed by the user. */
  @Deprecated public int id;
  /** The username chosen by the user. Can be changed by the user. */
  @Deprecated public java.lang.CharSequence username;
  /** The user's password, hashed using [scrypt](http://www.tarsnap.com/scrypt.html). */
  @Deprecated public java.lang.CharSequence passwordHash;
  /** Timestamp (milliseconds since epoch) when the user signed up */
  @Deprecated public long signupDate;
  /** All email addresses on the user's account */
  @Deprecated public java.util.List<com.example.avro.EmailAddress> emailAddresses;
  /** All Twitter accounts that the user has OAuthed */
  @Deprecated public java.util.List<com.example.avro.TwitterAccount> twitterAccounts;
  /** The top-level items in the user's to-do list */
  @Deprecated public java.util.List<com.example.avro.ToDoItem> toDoItems;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public User() {}

  /**
   * All-args constructor.
   */
  public User(java.lang.Integer id, java.lang.CharSequence username, java.lang.CharSequence passwordHash, java.lang.Long signupDate, java.util.List<com.example.avro.EmailAddress> emailAddresses, java.util.List<com.example.avro.TwitterAccount> twitterAccounts, java.util.List<com.example.avro.ToDoItem> toDoItems) {
    this.id = id;
    this.username = username;
    this.passwordHash = passwordHash;
    this.signupDate = signupDate;
    this.emailAddresses = emailAddresses;
    this.twitterAccounts = twitterAccounts;
    this.toDoItems = toDoItems;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return username;
    case 2: return passwordHash;
    case 3: return signupDate;
    case 4: return emailAddresses;
    case 5: return twitterAccounts;
    case 6: return toDoItems;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: username = (java.lang.CharSequence)value$; break;
    case 2: passwordHash = (java.lang.CharSequence)value$; break;
    case 3: signupDate = (java.lang.Long)value$; break;
    case 4: emailAddresses = (java.util.List<com.example.avro.EmailAddress>)value$; break;
    case 5: twitterAccounts = (java.util.List<com.example.avro.TwitterAccount>)value$; break;
    case 6: toDoItems = (java.util.List<com.example.avro.ToDoItem>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * System-assigned numeric user ID. Cannot be changed by the user.   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * System-assigned numeric user ID. Cannot be changed by the user.   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'username' field.
   * The username chosen by the user. Can be changed by the user.   */
  public java.lang.CharSequence getUsername() {
    return username;
  }

  /**
   * Sets the value of the 'username' field.
   * The username chosen by the user. Can be changed by the user.   * @param value the value to set.
   */
  public void setUsername(java.lang.CharSequence value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'passwordHash' field.
   * The user's password, hashed using [scrypt](http://www.tarsnap.com/scrypt.html).   */
  public java.lang.CharSequence getPasswordHash() {
    return passwordHash;
  }

  /**
   * Sets the value of the 'passwordHash' field.
   * The user's password, hashed using [scrypt](http://www.tarsnap.com/scrypt.html).   * @param value the value to set.
   */
  public void setPasswordHash(java.lang.CharSequence value) {
    this.passwordHash = value;
  }

  /**
   * Gets the value of the 'signupDate' field.
   * Timestamp (milliseconds since epoch) when the user signed up   */
  public java.lang.Long getSignupDate() {
    return signupDate;
  }

  /**
   * Sets the value of the 'signupDate' field.
   * Timestamp (milliseconds since epoch) when the user signed up   * @param value the value to set.
   */
  public void setSignupDate(java.lang.Long value) {
    this.signupDate = value;
  }

  /**
   * Gets the value of the 'emailAddresses' field.
   * All email addresses on the user's account   */
  public java.util.List<com.example.avro.EmailAddress> getEmailAddresses() {
    return emailAddresses;
  }

  /**
   * Sets the value of the 'emailAddresses' field.
   * All email addresses on the user's account   * @param value the value to set.
   */
  public void setEmailAddresses(java.util.List<com.example.avro.EmailAddress> value) {
    this.emailAddresses = value;
  }

  /**
   * Gets the value of the 'twitterAccounts' field.
   * All Twitter accounts that the user has OAuthed   */
  public java.util.List<com.example.avro.TwitterAccount> getTwitterAccounts() {
    return twitterAccounts;
  }

  /**
   * Sets the value of the 'twitterAccounts' field.
   * All Twitter accounts that the user has OAuthed   * @param value the value to set.
   */
  public void setTwitterAccounts(java.util.List<com.example.avro.TwitterAccount> value) {
    this.twitterAccounts = value;
  }

  /**
   * Gets the value of the 'toDoItems' field.
   * The top-level items in the user's to-do list   */
  public java.util.List<com.example.avro.ToDoItem> getToDoItems() {
    return toDoItems;
  }

  /**
   * Sets the value of the 'toDoItems' field.
   * The top-level items in the user's to-do list   * @param value the value to set.
   */
  public void setToDoItems(java.util.List<com.example.avro.ToDoItem> value) {
    this.toDoItems = value;
  }

  /** Creates a new User RecordBuilder */
  public static com.example.avro.User.Builder newBuilder() {
    return new com.example.avro.User.Builder();
  }
  
  /** Creates a new User RecordBuilder by copying an existing Builder */
  public static com.example.avro.User.Builder newBuilder(com.example.avro.User.Builder other) {
    return new com.example.avro.User.Builder(other);
  }
  
  /** Creates a new User RecordBuilder by copying an existing User instance */
  public static com.example.avro.User.Builder newBuilder(com.example.avro.User other) {
    return new com.example.avro.User.Builder(other);
  }
  
  /**
   * RecordBuilder for User instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    private int id;
    private java.lang.CharSequence username;
    private java.lang.CharSequence passwordHash;
    private long signupDate;
    private java.util.List<com.example.avro.EmailAddress> emailAddresses;
    private java.util.List<com.example.avro.TwitterAccount> twitterAccounts;
    private java.util.List<com.example.avro.ToDoItem> toDoItems;

    /** Creates a new Builder */
    private Builder() {
      super(com.example.avro.User.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.example.avro.User.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.passwordHash)) {
        this.passwordHash = data().deepCopy(fields()[2].schema(), other.passwordHash);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.signupDate)) {
        this.signupDate = data().deepCopy(fields()[3].schema(), other.signupDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.emailAddresses)) {
        this.emailAddresses = data().deepCopy(fields()[4].schema(), other.emailAddresses);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.twitterAccounts)) {
        this.twitterAccounts = data().deepCopy(fields()[5].schema(), other.twitterAccounts);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.toDoItems)) {
        this.toDoItems = data().deepCopy(fields()[6].schema(), other.toDoItems);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing User instance */
    private Builder(com.example.avro.User other) {
            super(com.example.avro.User.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.passwordHash)) {
        this.passwordHash = data().deepCopy(fields()[2].schema(), other.passwordHash);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.signupDate)) {
        this.signupDate = data().deepCopy(fields()[3].schema(), other.signupDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.emailAddresses)) {
        this.emailAddresses = data().deepCopy(fields()[4].schema(), other.emailAddresses);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.twitterAccounts)) {
        this.twitterAccounts = data().deepCopy(fields()[5].schema(), other.twitterAccounts);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.toDoItems)) {
        this.toDoItems = data().deepCopy(fields()[6].schema(), other.toDoItems);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Integer getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public com.example.avro.User.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public com.example.avro.User.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'username' field */
    public java.lang.CharSequence getUsername() {
      return username;
    }
    
    /** Sets the value of the 'username' field */
    public com.example.avro.User.Builder setUsername(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.username = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'username' field has been set */
    public boolean hasUsername() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'username' field */
    public com.example.avro.User.Builder clearUsername() {
      username = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'passwordHash' field */
    public java.lang.CharSequence getPasswordHash() {
      return passwordHash;
    }
    
    /** Sets the value of the 'passwordHash' field */
    public com.example.avro.User.Builder setPasswordHash(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.passwordHash = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'passwordHash' field has been set */
    public boolean hasPasswordHash() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'passwordHash' field */
    public com.example.avro.User.Builder clearPasswordHash() {
      passwordHash = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'signupDate' field */
    public java.lang.Long getSignupDate() {
      return signupDate;
    }
    
    /** Sets the value of the 'signupDate' field */
    public com.example.avro.User.Builder setSignupDate(long value) {
      validate(fields()[3], value);
      this.signupDate = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'signupDate' field has been set */
    public boolean hasSignupDate() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'signupDate' field */
    public com.example.avro.User.Builder clearSignupDate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'emailAddresses' field */
    public java.util.List<com.example.avro.EmailAddress> getEmailAddresses() {
      return emailAddresses;
    }
    
    /** Sets the value of the 'emailAddresses' field */
    public com.example.avro.User.Builder setEmailAddresses(java.util.List<com.example.avro.EmailAddress> value) {
      validate(fields()[4], value);
      this.emailAddresses = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'emailAddresses' field has been set */
    public boolean hasEmailAddresses() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'emailAddresses' field */
    public com.example.avro.User.Builder clearEmailAddresses() {
      emailAddresses = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'twitterAccounts' field */
    public java.util.List<com.example.avro.TwitterAccount> getTwitterAccounts() {
      return twitterAccounts;
    }
    
    /** Sets the value of the 'twitterAccounts' field */
    public com.example.avro.User.Builder setTwitterAccounts(java.util.List<com.example.avro.TwitterAccount> value) {
      validate(fields()[5], value);
      this.twitterAccounts = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'twitterAccounts' field has been set */
    public boolean hasTwitterAccounts() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'twitterAccounts' field */
    public com.example.avro.User.Builder clearTwitterAccounts() {
      twitterAccounts = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'toDoItems' field */
    public java.util.List<com.example.avro.ToDoItem> getToDoItems() {
      return toDoItems;
    }
    
    /** Sets the value of the 'toDoItems' field */
    public com.example.avro.User.Builder setToDoItems(java.util.List<com.example.avro.ToDoItem> value) {
      validate(fields()[6], value);
      this.toDoItems = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'toDoItems' field has been set */
    public boolean hasToDoItems() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'toDoItems' field */
    public com.example.avro.User.Builder clearToDoItems() {
      toDoItems = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public User build() {
      try {
        User record = new User();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.username = fieldSetFlags()[1] ? this.username : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.passwordHash = fieldSetFlags()[2] ? this.passwordHash : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.signupDate = fieldSetFlags()[3] ? this.signupDate : (java.lang.Long) defaultValue(fields()[3]);
        record.emailAddresses = fieldSetFlags()[4] ? this.emailAddresses : (java.util.List<com.example.avro.EmailAddress>) defaultValue(fields()[4]);
        record.twitterAccounts = fieldSetFlags()[5] ? this.twitterAccounts : (java.util.List<com.example.avro.TwitterAccount>) defaultValue(fields()[5]);
        record.toDoItems = fieldSetFlags()[6] ? this.toDoItems : (java.util.List<com.example.avro.ToDoItem>) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
