/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.example.avro;  
@SuppressWarnings("all")
/** Stores access credentials for one Twitter account, as granted to us by the user by OAuth. */
@org.apache.avro.specific.AvroGenerated
public class TwitterAccount extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TwitterAccount\",\"namespace\":\"com.example.avro\",\"doc\":\"Stores access credentials for one Twitter account, as granted to us by the user by OAuth.\",\"fields\":[{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"OAuthStatus\",\"doc\":\"* `PENDING`: the user has started authorizing, but not yet finished\\n* `ACTIVE`: the token should work\\n* `DENIED`: the user declined the authorization\\n* `EXPIRED`: the token used to work, but now it doesn't\\n* `REVOKED`: the user has explicitly revoked the token\",\"symbols\":[\"PENDING\",\"ACTIVE\",\"DENIED\",\"EXPIRED\",\"REVOKED\"]},\"doc\":\"Indicator of whether this authorization is currently active, or has been revoked\"},{\"name\":\"userId\",\"type\":\"long\",\"doc\":\"Twitter's numeric ID for this user\"},{\"name\":\"screenName\",\"type\":\"string\",\"doc\":\"The twitter username for this account (can be changed by the user)\"},{\"name\":\"oauthToken\",\"type\":\"string\",\"doc\":\"The OAuth token for this Twitter account\"},{\"name\":\"oauthTokenSecret\",\"type\":[\"null\",\"string\"],\"doc\":\"The OAuth secret, used for signing requests on behalf of this Twitter account. `null` whilst the OAuth flow is not yet complete.\"},{\"name\":\"dateAuthorized\",\"type\":\"long\",\"doc\":\"Timestamp (milliseconds since epoch) when the user last authorized this Twitter account\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Indicator of whether this authorization is currently active, or has been revoked */
  @Deprecated public com.example.avro.OAuthStatus status;
  /** Twitter's numeric ID for this user */
  @Deprecated public long userId;
  /** The twitter username for this account (can be changed by the user) */
  @Deprecated public java.lang.CharSequence screenName;
  /** The OAuth token for this Twitter account */
  @Deprecated public java.lang.CharSequence oauthToken;
  /** The OAuth secret, used for signing requests on behalf of this Twitter account. `null` whilst the OAuth flow is not yet complete. */
  @Deprecated public java.lang.CharSequence oauthTokenSecret;
  /** Timestamp (milliseconds since epoch) when the user last authorized this Twitter account */
  @Deprecated public long dateAuthorized;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public TwitterAccount() {}

  /**
   * All-args constructor.
   */
  public TwitterAccount(com.example.avro.OAuthStatus status, java.lang.Long userId, java.lang.CharSequence screenName, java.lang.CharSequence oauthToken, java.lang.CharSequence oauthTokenSecret, java.lang.Long dateAuthorized) {
    this.status = status;
    this.userId = userId;
    this.screenName = screenName;
    this.oauthToken = oauthToken;
    this.oauthTokenSecret = oauthTokenSecret;
    this.dateAuthorized = dateAuthorized;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return status;
    case 1: return userId;
    case 2: return screenName;
    case 3: return oauthToken;
    case 4: return oauthTokenSecret;
    case 5: return dateAuthorized;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: status = (com.example.avro.OAuthStatus)value$; break;
    case 1: userId = (java.lang.Long)value$; break;
    case 2: screenName = (java.lang.CharSequence)value$; break;
    case 3: oauthToken = (java.lang.CharSequence)value$; break;
    case 4: oauthTokenSecret = (java.lang.CharSequence)value$; break;
    case 5: dateAuthorized = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'status' field.
   * Indicator of whether this authorization is currently active, or has been revoked   */
  public com.example.avro.OAuthStatus getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * Indicator of whether this authorization is currently active, or has been revoked   * @param value the value to set.
   */
  public void setStatus(com.example.avro.OAuthStatus value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * Twitter's numeric ID for this user   */
  public java.lang.Long getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * Twitter's numeric ID for this user   * @param value the value to set.
   */
  public void setUserId(java.lang.Long value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'screenName' field.
   * The twitter username for this account (can be changed by the user)   */
  public java.lang.CharSequence getScreenName() {
    return screenName;
  }

  /**
   * Sets the value of the 'screenName' field.
   * The twitter username for this account (can be changed by the user)   * @param value the value to set.
   */
  public void setScreenName(java.lang.CharSequence value) {
    this.screenName = value;
  }

  /**
   * Gets the value of the 'oauthToken' field.
   * The OAuth token for this Twitter account   */
  public java.lang.CharSequence getOauthToken() {
    return oauthToken;
  }

  /**
   * Sets the value of the 'oauthToken' field.
   * The OAuth token for this Twitter account   * @param value the value to set.
   */
  public void setOauthToken(java.lang.CharSequence value) {
    this.oauthToken = value;
  }

  /**
   * Gets the value of the 'oauthTokenSecret' field.
   * The OAuth secret, used for signing requests on behalf of this Twitter account. `null` whilst the OAuth flow is not yet complete.   */
  public java.lang.CharSequence getOauthTokenSecret() {
    return oauthTokenSecret;
  }

  /**
   * Sets the value of the 'oauthTokenSecret' field.
   * The OAuth secret, used for signing requests on behalf of this Twitter account. `null` whilst the OAuth flow is not yet complete.   * @param value the value to set.
   */
  public void setOauthTokenSecret(java.lang.CharSequence value) {
    this.oauthTokenSecret = value;
  }

  /**
   * Gets the value of the 'dateAuthorized' field.
   * Timestamp (milliseconds since epoch) when the user last authorized this Twitter account   */
  public java.lang.Long getDateAuthorized() {
    return dateAuthorized;
  }

  /**
   * Sets the value of the 'dateAuthorized' field.
   * Timestamp (milliseconds since epoch) when the user last authorized this Twitter account   * @param value the value to set.
   */
  public void setDateAuthorized(java.lang.Long value) {
    this.dateAuthorized = value;
  }

  /** Creates a new TwitterAccount RecordBuilder */
  public static com.example.avro.TwitterAccount.Builder newBuilder() {
    return new com.example.avro.TwitterAccount.Builder();
  }
  
  /** Creates a new TwitterAccount RecordBuilder by copying an existing Builder */
  public static com.example.avro.TwitterAccount.Builder newBuilder(com.example.avro.TwitterAccount.Builder other) {
    return new com.example.avro.TwitterAccount.Builder(other);
  }
  
  /** Creates a new TwitterAccount RecordBuilder by copying an existing TwitterAccount instance */
  public static com.example.avro.TwitterAccount.Builder newBuilder(com.example.avro.TwitterAccount other) {
    return new com.example.avro.TwitterAccount.Builder(other);
  }
  
  /**
   * RecordBuilder for TwitterAccount instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TwitterAccount>
    implements org.apache.avro.data.RecordBuilder<TwitterAccount> {

    private com.example.avro.OAuthStatus status;
    private long userId;
    private java.lang.CharSequence screenName;
    private java.lang.CharSequence oauthToken;
    private java.lang.CharSequence oauthTokenSecret;
    private long dateAuthorized;

    /** Creates a new Builder */
    private Builder() {
      super(com.example.avro.TwitterAccount.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.example.avro.TwitterAccount.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.status)) {
        this.status = data().deepCopy(fields()[0].schema(), other.status);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.screenName)) {
        this.screenName = data().deepCopy(fields()[2].schema(), other.screenName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.oauthToken)) {
        this.oauthToken = data().deepCopy(fields()[3].schema(), other.oauthToken);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.oauthTokenSecret)) {
        this.oauthTokenSecret = data().deepCopy(fields()[4].schema(), other.oauthTokenSecret);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.dateAuthorized)) {
        this.dateAuthorized = data().deepCopy(fields()[5].schema(), other.dateAuthorized);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing TwitterAccount instance */
    private Builder(com.example.avro.TwitterAccount other) {
            super(com.example.avro.TwitterAccount.SCHEMA$);
      if (isValidValue(fields()[0], other.status)) {
        this.status = data().deepCopy(fields()[0].schema(), other.status);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.screenName)) {
        this.screenName = data().deepCopy(fields()[2].schema(), other.screenName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.oauthToken)) {
        this.oauthToken = data().deepCopy(fields()[3].schema(), other.oauthToken);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.oauthTokenSecret)) {
        this.oauthTokenSecret = data().deepCopy(fields()[4].schema(), other.oauthTokenSecret);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.dateAuthorized)) {
        this.dateAuthorized = data().deepCopy(fields()[5].schema(), other.dateAuthorized);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'status' field */
    public com.example.avro.OAuthStatus getStatus() {
      return status;
    }
    
    /** Sets the value of the 'status' field */
    public com.example.avro.TwitterAccount.Builder setStatus(com.example.avro.OAuthStatus value) {
      validate(fields()[0], value);
      this.status = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'status' field has been set */
    public boolean hasStatus() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'status' field */
    public com.example.avro.TwitterAccount.Builder clearStatus() {
      status = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'userId' field */
    public java.lang.Long getUserId() {
      return userId;
    }
    
    /** Sets the value of the 'userId' field */
    public com.example.avro.TwitterAccount.Builder setUserId(long value) {
      validate(fields()[1], value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'userId' field has been set */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'userId' field */
    public com.example.avro.TwitterAccount.Builder clearUserId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'screenName' field */
    public java.lang.CharSequence getScreenName() {
      return screenName;
    }
    
    /** Sets the value of the 'screenName' field */
    public com.example.avro.TwitterAccount.Builder setScreenName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.screenName = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'screenName' field has been set */
    public boolean hasScreenName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'screenName' field */
    public com.example.avro.TwitterAccount.Builder clearScreenName() {
      screenName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'oauthToken' field */
    public java.lang.CharSequence getOauthToken() {
      return oauthToken;
    }
    
    /** Sets the value of the 'oauthToken' field */
    public com.example.avro.TwitterAccount.Builder setOauthToken(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.oauthToken = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'oauthToken' field has been set */
    public boolean hasOauthToken() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'oauthToken' field */
    public com.example.avro.TwitterAccount.Builder clearOauthToken() {
      oauthToken = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'oauthTokenSecret' field */
    public java.lang.CharSequence getOauthTokenSecret() {
      return oauthTokenSecret;
    }
    
    /** Sets the value of the 'oauthTokenSecret' field */
    public com.example.avro.TwitterAccount.Builder setOauthTokenSecret(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.oauthTokenSecret = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'oauthTokenSecret' field has been set */
    public boolean hasOauthTokenSecret() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'oauthTokenSecret' field */
    public com.example.avro.TwitterAccount.Builder clearOauthTokenSecret() {
      oauthTokenSecret = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'dateAuthorized' field */
    public java.lang.Long getDateAuthorized() {
      return dateAuthorized;
    }
    
    /** Sets the value of the 'dateAuthorized' field */
    public com.example.avro.TwitterAccount.Builder setDateAuthorized(long value) {
      validate(fields()[5], value);
      this.dateAuthorized = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'dateAuthorized' field has been set */
    public boolean hasDateAuthorized() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'dateAuthorized' field */
    public com.example.avro.TwitterAccount.Builder clearDateAuthorized() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public TwitterAccount build() {
      try {
        TwitterAccount record = new TwitterAccount();
        record.status = fieldSetFlags()[0] ? this.status : (com.example.avro.OAuthStatus) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (java.lang.Long) defaultValue(fields()[1]);
        record.screenName = fieldSetFlags()[2] ? this.screenName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.oauthToken = fieldSetFlags()[3] ? this.oauthToken : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.oauthTokenSecret = fieldSetFlags()[4] ? this.oauthTokenSecret : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.dateAuthorized = fieldSetFlags()[5] ? this.dateAuthorized : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
