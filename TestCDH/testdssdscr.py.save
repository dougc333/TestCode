#!/usr/bin/env python

import sys
import argparse
import subprocess
from cm_api.api_client import ApiResource
from cm_api.api_client import ApiException
from cm_api.endpoints.clusters import create_cluster
from cm_api.endpoints.clusters import delete_cluster
from cm_api.endpoints.cms import ClouderaManager
from cm_api.endpoints.parcels import get_parcel

from time import sleep
import re

from config import HDD_hdfs_config


beta_repo=[
  'http://dssd-beta:dssd-beta@bits.cloudera.com/73a30662/cm560/redhat/6/x86_64/cm/',
  'http://dssd-beta:dssd-beta@bits.cloudera.com/73a30662/cdh560/parcels/5.6.0.2/',
  'http://r2341-d5-us48.dssd.com/parcels/dssd/'
]

code_drop_6_repo=[
  'http://dssd:dssd@bits.cloudera.com/c515c923/',
  'http://dssd:dssd@bits.cloudera.com/9d7343ba/',
  'http://r2341-d5-us48.dssd.com/parcels/dssd/'
]

service_types_and_names = {
			   "ZOOKEEPER" : "ZooKeeper",
			   "HDFS" : "HDFS",
			   "YARN" : "YARN(MR2 Included",
			   "HBASE" : "HBase",
			   "HIVE" : "HIVE",
			   "IMPALA" : "IMPALA",
			   "SOLR" : "SOLR"
			    }

hosts = [ 'r2341-d5-us01',
          'r2341-d5-us02',
          'r2341-s5-us03',
          'r2341-d5-us04' ]

def setDSSD(boolValue,api):
  cm=ClouderaManager(api)
  cm.update_config({"dssd_enabled": boolValue})
  
         
def add_cloudera_mgmt_service(api):
  #verify the hosts are already registerd b/c we setup cloudera-agent individually
  #on the beta we shouldnt have to do this, we should be able to use the Cloudera Manager repo
  cm = ClouderaManager(api)
  #dont call host_install b/c Cloudera agent already running
  service_setup_info = ApiServiceSetupInfo("Cloudera Management Service","MGMT")
  create_mgmt_service(service_setup_info)
  #might not need the license
  #with open("/root/dssdemc_dev_cloudera_enterprise_license.txt","r") as ltext:
  #   file_contents = ltext.read()
  

def add_hosts(api):
   for cluster in api.get_all_clusters():
      host_list = api.get_all_hosts(view="full")
      print host_list.to_json_dict(preserve_ro=True)
      hostId_list = []
      print "cluster name:%s", cluster.name + " cluster version:%s", cluster.version
      for i in range(0,len(host_list)):
          print "hostId[i]:"+host_list.to_json_dict(preserve_ro=True)["items"][i]["hostId"]
          hostId_list.append(host_list.to_json_dict(preserve_ro=True)["items"][i]["hostId"])
      cluster.add_hosts(hostId_list)

def get(api):
  for cluster in api_get_all_clusters():
     host_list = cluster.list_hosts
  print "host_list:"
  print host_list
  print "getting component fields"
  cluster = api.get_cluster("Cluster 1")
  impala = cluster.get_service("impala")
  impala_config = impala.get_config(view="full")
  print "--------------config objects------------"
  print impala_config
  impala_roles = impala.get_all_roles(view="full")
  print "--------------------roles----------------"
  print impala_roles 
  impala_role_config_groups = impala.get_all_role_config_groups()
  for ircg in impala_role_config_groups:
     print ircg
  # print metrics, need to modify to use the endpoint instead
  #impala_metrics = impala.get_metrics()
  #for m in impala_metrics:
  #  print "%s (%s)" % (m.name, m.unit)
  

def parcels(api):
  cm_config=api.get_cloudera_manager().get_config(view="full")
  repo_config=cm_config['REMOTE_PARCEL_REPO_URLS']
  print repo_config
  # adding a parcel repo
  value = repo_config.value #or repo_config.default
  # value is a comma-separated list
  #parcel_repo="r2341-d5-us48/parcels/personal_parcels/dougc"
  #value += ',' + parcel_repo
  api.get_cloudera_manager().update_config({
  'REMOTE_PARCEL_REPO_URLS': value})
  # wait to make sure parcels are refreshed
  time.sleep(10)
  #verify in console the urls are added

 
def add_parcels(api):
   """
   """  
   for cluster in api.get_all_clusters():
      # get and list all available parcels
      parcels_dict={}
      for p in cluster.get_all_parcels():
        print '\t' + p.product + p.version
        if str(p.product+p.version).startswith("DSSD5.6.0"):
          print "found DSSD 5.6.0"
          parcels_dict[p.product+p.version]=p 
        #if p.product.startswith("IMPALA"):
        #  print "found Impala"
        #  parcels_list.append(p) 
        if str(p.product+p.version).startswith("CDH5.6.0"):
          print "found CDH 5.6.0"
          parcels_dict[p.product+p.version]=p 
        if p.product.startswith("DSSD_SCR"):
          print "found DSSD_SCR"
          parcels_dict[p.product+p.version]=p 
      print "num parcels to distribute and activate:", len(parcels_dict) 
      print parcels_dict
       
   
      distMe = parcels_dict.get('CDH5.6.0-1.cdh5.6.0.p0.70')
      print "found CDH first, we update this first:", distMe.product+" ,version:"+distMe.version
      
      
      print "Downloading"
      cmd = distMe.start_download()
      while distMe.stage != "DOWNLOADED":
        sleep(5)
        print("."),
        distMe=get_parcel(api, distMe.product, distMe.version, cluster.name)
      print "parcel downloaded", distMe.product+" ,version:" + distMe.version + "DOWNLOADED"      

   
      cmd = distMe.start_distribution()
      print "Distributing"
      while distMe.stage != "DISTRIBUTED":
        sleep(5)
        print("."),
        sys.stdout.flush()
        distMe= get_parcel(api,distMe.product, distMe.version, cluster.name)
      print "parcel distributed" , distMe.product + ", version:", distMe.version + "DISTRIBUTED"
      
      cmd = distMe.activate()
      if cmd.success != True:
        print "activation failed!!!"
        exit(0)

      print "Activating"
      while distMe.stage != "ACTIVATED":
        sleep(5) 
        print".",
        distMe = get_parcel(api, distMe.product, distMe.version, cluster.name) 
      print "parcel activated" , distMe.product + ", version:", distMe.version + "ACTIVATED"
      
      # set vm.swappiness and thp
      config_swap_and_thp()

      # inspect hosts
      print "inspecting hosts",
      cmd = cm.inspect_hosts()
      while cmd.success == None:
        sleep(5)
        print ".",
        cmd=cmd.fetch()
      
      if (cmd.success != True):
        print "host inspection failed"
        exit(0)
      
      print "hosts successfully inspected!!!" + cmd.resultMessage
 
      

def install_hdd_hdfs():
  """
  """
  



def config_swap_and_thp():
  print "start bash shell script for swap and thp"
  subprocess.call("swappy.sh")
  print "finished swap and thp settings"        





def cm_args_parser():
  parser = argparse.ArgumentParser()
  parser.add_argument("--cm_host", default="r2341-d5-us01",help="cloudera manager host address")
  parser.add_argument("--cm-user", default="admin", help="cloudera manager user name, should be admin unless you changed it")
  parser.add_argument("--cm-password", default="admin", help="default is admin, unless you changed it")
  return parser

def clean(api):
  for cluster in api.get_all_clusters():
    list_hosts = cluster.list_hosts
    print "hosts:" #use this to add back when creating the cluster hostIds
    print list_hosts
    print "cluster:" + cluster.name + " ,cluster version:" + cluster.version
    for service in cluster.get_all_services():
       service.stop().wait()
       cluster.delete_service(service.name)
    #delete cloudera mgmt service
    cm = ClouderaManager(api)
    try:
      cm.delete_mgmt_service()
    except ApiException:
      print "mgmt service doesn't exist"
    api.delete_cluster(cluster.name)


def make_cluster(cluster_name, api):
  """
  """
  api.create_cluster(cluster_name,version="CDH5")
  add_hosts(api)

def main():
  parser = cm_args_parser()
  args = parser.parse_args()
  print "connecting to host:" + args.cm_host + "..."
  api = ApiResource(args.cm_host, username=args.cm_user, password=args.cm_password)
  print "done....."
  clean(api) 
  setDSSD(False, api)
  make_cluster("HDDTest", api)
  add_parcels(api)
  #setDSSD(True, api)
  #make_cluster("D5Test",api)
  

 


if __name__ == '__main__':
  main()
